.\" Copyright (C) 2019 VirtualSquare. Project Leader: Renzo Davoli
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License,
.\" as published by the Free Software Foundation, either version 2
.\" of the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston,
.\" MA 02110-1301 USA.
.\"
.\" Automatically generated by Pandoc 3.1.11
.\"
.TH "LIBVDESLIRPFWD" "3" "January 2024" "VirtualSquare" "Library Functions Manual"
.SH NAME
vdeslirp_add_fwd, vdeslirp_remove_fwd, vdeslirp_add_unixfwd,
vdeslirp_remove_unixfwd, vdeslirp_add_cmdexec \- simple API for slirp,
port forwarding
.SH SYNOPSIS
\f[CB]#include *libvdeslirp.h*\f[R]
.PP
\f[CB]int vdeslirp_add_fwd(struct vdeslirp *\f[R]\f[I]slirp\f[R]\f[CB], int\f[R]
\f[I]is_udp\f[R]\f[CB], struct in_addr\f[R]
\f[I]host_addr\f[R]\f[CB], int\f[R]
\f[I]host_port\f[R]\f[CB], struct in_addr\f[R]
\f[I]guest_addr\f[R]\f[CB], int\f[R] \f[I]guest_port\f[R]\f[CB]);\f[R]
.PP
\f[CB]int vdeslirp_remove_fwd(struct vdeslirp *\f[R]\f[I]slirp\f[R]\f[CB], int\f[R]
\f[I]is_udp\f[R]\f[CB], struct in_addr\f[R]
\f[I]host_addr\f[R]\f[CB], int\f[R] \f[I]host_port\f[R]\f[CB]);\f[R]
.PP
\f[CB]int vdeslirp_add_unixfwd(struct vdeslirp *\f[R]\f[I]slirp\f[R]\f[CB], char *\f[R]\f[I]path\f[R]\f[CB], struct in_addr\f[R]
\f[I]guest_addr\f[R]\f[CB], int\f[R] \f[I]guest_port\f[R]\f[CB]);\f[R]
.PP
\f[CB]int vdeslirp_remove_unixfwd(struct vdeslirp *\f[R]\f[I]slirp\f[R]\f[CB], struct in_addr\f[R]
\f[I]guest_addr\f[R]\f[CB], int\f[R] \f[I]guest_port\f[R]\f[CB]);\f[R]
.PP
\f[CB]int vdeslirp_add_cmdexec(struct vdeslirp *\f[R]\f[I]slirp\f[R]\f[CB], const char *\f[R]\f[I]cmdline\f[R]\f[CB], struct in_addr *\f[R]\f[I]guest_addr\f[R]\f[CB], int\f[R]
\f[I]guest_port\f[R]\f[CB]);\f[R]
.PP
\f[CB]int vdeslirp_remove_cmdexec(struct vdeslirp *\f[R]\f[I]slirp\f[R]\f[CB], struct in_addr\f[R]
\f[I]guest_addr\f[R]\f[CB], int\f[R] \f[I]guest_port\f[R]\f[CB]);\f[R]
.SH DESCRIPTION
Slirp, see libvdelirp(3), is a TCP/IP emulator.
Slirp generates a virtual network using standard user privileges (no
need for root access of CAP_NET_ADMIN).
These functions manage port forwarding services.
.PP
\f[CB]vdeslirp_add_fwd\f[R] and \f[CB]vdeslirp_remove_fwd\f[R]
respectively add and remove udp or tcp port forwarding services
(depending upon the value of is_udp).
\f[I]host_addr\f[R] and \f[I]host_port\f[R] are the IP address and port
number bound for the service in the host system.
All the connections or datagrams to \f[I]host_addr\f[R] and
\f[I]host_port\f[R] will be diverted to \f[I]guest_addr\f[R] and
\f[I]guest_port\f[R] in the slirp virtual network.
.PP
\f[CB]vdeslirp_add_unixfwd\f[R] and \f[CB]vdeslirp_remove_unixfwd\f[R]
respectively add and remove a forwarding service towards a
\f[CB]PF_UNIX\f[R] stream socket on the hosting system.
All the connections from a node of the virtual network to
\f[I]guest_addr\f[R] and \f[I]guest_port\f[R] will be diverted to the
\f[CB]PF_UNIX\f[R] bound to the pathname path.
This feature is commonly used to run X\-window clients in the virtual
network (e.g.\ the value of path could be
\f[CB]/tmp/.X11\-unix/X0\f[R]).
.PP
If libslirp does not support \f[CB]slirp_add_unix\f[R],
\f[CB]vdeslirp_add_unixfwd\f[R] is implemented by a workaround based on
\f[CB]nc\f[R](1).
.PP
\f[CB]vdeslirp_cmd_fwd\f[R] adds a forwarding service to a command.
A TCP connection to \f[I]guest_addr\f[R] and \f[I]guest_port\f[R]
activates the command \f[I]cmdline\f[R].
Data exchanged on the TCP connection is forwarded as stdin/stdout to the
command.
.PP
\f[CB]vdeslirp_remove_cmdexec\f[R] removes a command forwarding service.
.SH RETURN VALUE
All these functions return 0 in case of success, \-1 otherwise (and
\f[CB]errno\f[R] is set consequently).
\f[CB]vdeslirp_remove_cmdexec\f[R] and
\f[CB]vdeslirp_remove_unixfwd\f[R] return \-1 and set errno to
\f[CB]ENOSYS\f[R] if libslirp does not support
\f[CB]slirp_remove_guestfwd\f[R].
.SH SEE ALSO
\f[CB]libvdeslirp\f[R](3), \f[CB]libvdeslirpcfg\f[R](3)
.SH BUGS
Bug reports should be addressed to *info\[at]virtualsquare.org*
.SH AUTHOR
VirtualSquare.
Project leader: Renzo Davoli.
